diff --git a/app/src/core/backend.ts b/app/src/core/backend.ts
index b59a7fc..9178fca 100644
--- a/app/src/core/backend.ts
+++ b/app/src/core/backend.ts
@@ -211,7 +211,7 @@ export class Backend extends EventEmitter {
         window.location.href = endpoint + '/logout';
     }
 
-    async shareChat(chat: Chat): Promise<string | null> {
+    async shareChat(chat: Chat): Promise<string | null> { //COMPLETENESS modify to send summaries of game data too
         try {
             const { id } = await this.post(endpoint + '/share', {
                 ...chat,
@@ -226,7 +226,7 @@ export class Backend extends EventEmitter {
         return null;
     }
 
-    async getSharedChat(id: string): Promise<Chat | null> {
+    async getSharedChat(id: string): Promise<Chat | null> { //COMPLETENESS modify to recieve summaries of game data too
         const format = process.env.REACT_APP_SHARE_URL || (endpoint + '/share/:id');
         const url = format.replace(':id', id);
         try {
@@ -276,4 +276,17 @@ export class Backend extends EventEmitter {
         }
         return response.json();
     }
+
+    async saveSummary(summaryData: {
+        summaryID: string,
+        userID: string,
+        chatID: string,
+        messageIDs: string[],
+        summary: string
+    }) {
+        const endpoint = '/chatapi/save-summaries';
+        return this.post(endpoint, summaryData);
+    }
+
+    //COMPLETENESS add function to get summaries from server
 }
\ No newline at end of file
diff --git a/app/src/core/game/game.ts b/app/src/core/game/game.ts
index f967e77..bee3c23 100644
--- a/app/src/core/game/game.ts
+++ b/app/src/core/game/game.ts
@@ -1,4 +1,6 @@
 import { RequestAgentReply, agentMessageReply } from "./openaiService";
+import { Chat, Message, Parameters, UserSubmittedMessage } from "../chat/types"
+import { backend } from "../backend";
 
 //agents dont return, everything they do should be handled in postprocessMessage
 abstract class Agent<T> {
@@ -43,15 +45,37 @@ class SummaryAgentBase extends Agent<any> {
             return "I am an API requesting that you summarize the following text, focusing on imporant moments between characters. The goal is to make it easy for a Dungeon Master to recall details important to the player to craft a compelling story: " + message;
         }
     
-        postprocessMessage(response: any): any {
-            const responseContent = response.choices[0].message?.content?.trim()
-            console.log('response postprocessing extracted message: ', responseContent)
+        async postprocessMessage(response: any): Promise<void> {
+            const responseContent = response.choices[0].message?.content?.trim();
+            console.log('response postprocessing extracted message: ', responseContent);
+    
+            // Assuming you have access to the backend instance and other required data
+            const summaryData = {
+                summaryID: 'someUniqueID', // Generate a unique ID for the summary
+                userID: 'currentUser',    // Use the current user's ID
+                chatID: 'currentChat',    // Use the current chat's ID
+                messageIDs: ['msg1', 'msg2'], // List of message IDs related to the summary
+                summary: responseContent  // The extracted summary content
+            };
+    
+            try {
+                await backend.current?.saveSummary(summaryData);
+                console.log('Summary saved successfully.');
+            } catch (error) {
+                console.error('Error saving summary:', error);
+            }
         }
 
     }
 
 
-export function GameLoop () {
+export function GameLoop (messages:Message[] ) {
+    let compiledString = messages.map(message => {
+        const content = message.content || '';
+        const role = message.role || '';
+        return `${role}: ${content}`;
+    }).join(' ');
+
     console.log("GameLoop running");
     const summaryAgent = new SummaryAgentBase(); 
 
diff --git a/app/src/core/index.ts b/app/src/core/index.ts
index 7215a4d..450452e 100644
--- a/app/src/core/index.ts
+++ b/app/src/core/index.ts
@@ -156,7 +156,7 @@ export class ChatManager extends EventEmitter {
         const messages: Message[] = this.doc.getMessagesPrecedingMessage(message.chatID, message.id);
         messages.push(message);
 
-        GameLoop();
+        GameLoop(messages);
 
         await this.getReply(messages, userSubmittedMessage.requestedParameters);
     }
diff --git a/server/src/database/index.ts b/server/src/database/index.ts
index be94364..7a747de 100644
--- a/server/src/database/index.ts
+++ b/server/src/database/index.ts
@@ -22,6 +22,9 @@ export default abstract class Database {
     public abstract setTitle(userID: string, chatID: string, title: string): Promise<void>;
     public abstract deleteChat(userID: string, chatID: string): Promise<any>;
     public abstract getDeletedChatIDs(userID: string): Promise<string[]>;
+    public abstract saveSummary(summaryID: string, userID: string, chatID: string, messageIDs: string[], summary: string): Promise<void>;
+    public abstract getSummaries(userID: string, chatID: string): Promise<{ userID: string, chatID: string, messageIDs: string[], summary: string}[]>;
+
 
     protected abstract loadYDoc(userID: string): Promise<Doc>;
     public abstract saveYUpdate(userID: string, update: Uint8Array): Promise<void>;
diff --git a/server/src/database/knex.ts b/server/src/database/knex.ts
index dbcf1df..561c74c 100644
--- a/server/src/database/knex.ts
+++ b/server/src/database/knex.ts
@@ -10,6 +10,7 @@ const tableNames = {
     messages: 'messages',
     shares: 'shares',
     yjsUpdates: 'updates',
+    summaries: 'summaries',
 };
 
 export default class KnexDatabaseAdapter extends Database {
@@ -63,6 +64,15 @@ export default class KnexDatabaseAdapter extends Database {
             table.binary('update');
             table.index('user_id');
         });
+
+        await this.createTableIfNotExists(tableNames.summaries, (table) => {
+            table.text('id').primary(); 
+            table.text('user_id'); 
+            table.text('chat_id'); // STABILITY: add foreign key stuff here
+            table.text('message_ids'); 
+            table.text('summary'); 
+        });
+        
     }
 
     private async createTableIfNotExists(tableName: string, tableBuilderCallback: (tableBuilder: Knex.CreateTableBuilder) => any) {
@@ -138,6 +148,7 @@ export default class KnexDatabaseAdapter extends Database {
         await this.knex.transaction(async (trx) => {
             await trx(tableNames.chats).where({ id: chatID, user_id: userID }).delete();
             await trx(tableNames.messages).where({ chat_id: chatID, user_id: userID }).delete();
+            await trx(tableNames.summaries).where({ chat_id: chatID }).delete();
             await trx(tableNames.deletedChats)
                 .insert({ id: chatID, user_id: userID, deleted_at: new Date() });
         });
@@ -202,4 +213,27 @@ export default class KnexDatabaseAdapter extends Database {
                 update: Buffer.from(update),
             });
     }
+
+    public async saveSummary(summaryID: string, userID: string, chatID: string, messageIDs: string[], summary: string): Promise<void> {
+        await this.knex(tableNames.summaries).insert({
+            id: summaryID, // Use the provided summary ID
+            user_id: userID, 
+            chat_id: chatID, 
+            message_ids: JSON.stringify(messageIDs), 
+            summary
+        });
+    }
+    
+
+    public async getSummaries(userID: string, chatID: string): Promise<{ userID: string, chatID: string, messageIDs: string[], summary: string}[]> {
+        const rows = await this.knex(tableNames.summaries)
+            .where('user_id', userID) 
+            .andWhere('chat_id', chatID); 
+        for (let row of rows) {
+            row.messageIDs = JSON.parse(row.message_ids);
+        }
+        return rows;
+    }
+    
+    
 }
\ No newline at end of file
diff --git a/server/src/endpoints/game-data.ts b/server/src/endpoints/game-data.ts
new file mode 100644
index 0000000..2966bac
--- /dev/null
+++ b/server/src/endpoints/game-data.ts
@@ -0,0 +1,44 @@
+import express from 'express';
+import RequestHandler from "./base";
+
+export class SaveSummaryHandler extends RequestHandler {
+    
+    async handler(req: express.Request, res: express.Response) {
+        try {
+            const { summaryID, userID, chatID, messageIDs, summary } = req.body;
+            await this.context.database.saveSummary(summaryID, userID, chatID, messageIDs, summary);
+            res.status(200).send({ message: 'Summary saved successfully.' });
+        } catch (error) {
+            if (error instanceof Error) {
+                res.status(500).send({ message: 'Error saving summaries.', error: error.message });
+            } else {
+                res.status(500).send({ message: 'Error saving summaries.', error: 'An unknown error occurred.' });
+            }
+        }
+    }
+
+    public isProtected() { // 
+        return false; // or false, based on your requirements
+    }
+}
+
+export class GetSummariesHandler extends RequestHandler {
+    
+    async handler(req: express.Request, res: express.Response) {
+        try {
+            const { userID, chatID } = req.params; // Assuming you're passing these as URL parameters
+            const summaries = await this.context.database.getSummaries(userID, chatID);
+            res.status(200).send(summaries);
+        } catch (error) {
+            if (error instanceof Error) {
+                res.status(500).send({ message: 'Error retrieving summaries.', error: error.message });
+            } else {
+                res.status(500).send({ message: 'Error retrieving summaries.', error: 'An unknown error occurred.' });
+            }
+        }
+    }
+
+    public isProtected() {
+        return false; // or false, based on your requirements
+    }
+}
\ No newline at end of file
diff --git a/server/src/index.ts b/server/src/index.ts
index 4ea4c86..63f00cf 100644
--- a/server/src/index.ts
+++ b/server/src/index.ts
@@ -25,6 +25,7 @@ import SyncRequestHandler, { getNumUpdatesProcessedIn5Minutes } from './endpoint
 import LegacySyncRequestHandler from './endpoints/sync-legacy';
 import { getActiveUsersInLast5Minutes } from './endpoints/base';
 import { formatTime } from './utils';
+import { GetSummariesHandler, SaveSummaryHandler } from './endpoints/game-data';
 
 process.on('unhandledRejection', (reason, p) => {
     console.error('Unhandled Rejection at: Promise', p, 'reason:', reason);
@@ -182,6 +183,10 @@ export default class ChatServer {
             }
         }
         
+        this.app.post('/chatapi/save-summaries', (req, res) => new SaveSummaryHandler (this, req, res));
+
+        this.app.get('/chatapi/get-summaries', (req, res) => new GetSummariesHandler (this, req, res));
+
         setInterval(displayStatistics, 1000 * 60 * 5);
         setTimeout(displayStatistics, 1000 * 30);
     }
